#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VMA
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Baza_projekt")]
	public partial class DataBaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCare_serviceSet(Care_serviceSet instance);
    partial void UpdateCare_serviceSet(Care_serviceSet instance);
    partial void DeleteCare_serviceSet(Care_serviceSet instance);
    partial void InsertCareSet(CareSet instance);
    partial void UpdateCareSet(CareSet instance);
    partial void DeleteCareSet(CareSet instance);
    partial void InsertCheck_vehicleSet(Check_vehicleSet instance);
    partial void UpdateCheck_vehicleSet(Check_vehicleSet instance);
    partial void DeleteCheck_vehicleSet(Check_vehicleSet instance);
    partial void InsertCompanySet(CompanySet instance);
    partial void UpdateCompanySet(CompanySet instance);
    partial void DeleteCompanySet(CompanySet instance);
    partial void InsertPurchaseSet(PurchaseSet instance);
    partial void UpdatePurchaseSet(PurchaseSet instance);
    partial void DeletePurchaseSet(PurchaseSet instance);
    partial void InsertRentSet(RentSet instance);
    partial void UpdateRentSet(RentSet instance);
    partial void DeleteRentSet(RentSet instance);
    partial void InsertReservationSet(ReservationSet instance);
    partial void UpdateReservationSet(ReservationSet instance);
    partial void DeleteReservationSet(ReservationSet instance);
    partial void InsertServiceSet(ServiceSet instance);
    partial void UpdateServiceSet(ServiceSet instance);
    partial void DeleteServiceSet(ServiceSet instance);
    partial void InsertVehicleSet(VehicleSet instance);
    partial void UpdateVehicleSet(VehicleSet instance);
    partial void DeleteVehicleSet(VehicleSet instance);
    partial void InsertWorkerSet(WorkerSet instance);
    partial void UpdateWorkerSet(WorkerSet instance);
    partial void DeleteWorkerSet(WorkerSet instance);
    partial void InsertWorkerSet_Keeper(WorkerSet_Keeper instance);
    partial void UpdateWorkerSet_Keeper(WorkerSet_Keeper instance);
    partial void DeleteWorkerSet_Keeper(WorkerSet_Keeper instance);
    #endregion
		
		public DataBaseDataContext() : 
				base(global::VMA.Properties.Settings.Default.Baza_projektConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Care_serviceSet> Care_serviceSets
		{
			get
			{
				return this.GetTable<Care_serviceSet>();
			}
		}
		
		public System.Data.Linq.Table<CareSet> CareSets
		{
			get
			{
				return this.GetTable<CareSet>();
			}
		}
		
		public System.Data.Linq.Table<Check_vehicleSet> Check_vehicleSets
		{
			get
			{
				return this.GetTable<Check_vehicleSet>();
			}
		}
		
		public System.Data.Linq.Table<CompanySet> CompanySets
		{
			get
			{
				return this.GetTable<CompanySet>();
			}
		}
		
		public System.Data.Linq.Table<PurchaseSet> PurchaseSets
		{
			get
			{
				return this.GetTable<PurchaseSet>();
			}
		}
		
		public System.Data.Linq.Table<RentSet> RentSets
		{
			get
			{
				return this.GetTable<RentSet>();
			}
		}
		
		public System.Data.Linq.Table<ReservationSet> ReservationSets
		{
			get
			{
				return this.GetTable<ReservationSet>();
			}
		}
		
		public System.Data.Linq.Table<ServiceSet> ServiceSets
		{
			get
			{
				return this.GetTable<ServiceSet>();
			}
		}
		
		public System.Data.Linq.Table<VehicleSet> VehicleSets
		{
			get
			{
				return this.GetTable<VehicleSet>();
			}
		}
		
		public System.Data.Linq.Table<WorkerSet> WorkerSets
		{
			get
			{
				return this.GetTable<WorkerSet>();
			}
		}
		
		public System.Data.Linq.Table<WorkerSet_Keeper> WorkerSet_Keepers
		{
			get
			{
				return this.GetTable<WorkerSet_Keeper>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Care_serviceSet")]
	public partial class Care_serviceSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _care_service_id;
		
		private System.DateTime _date_from;
		
		private System.Nullable<System.DateTime> _data_to;
		
		private double _price;
		
		private int _Care_care_id;
		
		private int _Company_company_id;
		
		private int _Service_service_id;
		
		private EntityRef<CareSet> _CareSet;
		
		private EntityRef<CompanySet> _CompanySet;
		
		private EntityRef<ServiceSet> _ServiceSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncare_service_idChanging(int value);
    partial void Oncare_service_idChanged();
    partial void Ondate_fromChanging(System.DateTime value);
    partial void Ondate_fromChanged();
    partial void Ondata_toChanging(System.Nullable<System.DateTime> value);
    partial void Ondata_toChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnCare_care_idChanging(int value);
    partial void OnCare_care_idChanged();
    partial void OnCompany_company_idChanging(int value);
    partial void OnCompany_company_idChanged();
    partial void OnService_service_idChanging(int value);
    partial void OnService_service_idChanged();
    #endregion
		
		public Care_serviceSet()
		{
			this._CareSet = default(EntityRef<CareSet>);
			this._CompanySet = default(EntityRef<CompanySet>);
			this._ServiceSet = default(EntityRef<ServiceSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_care_service_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int care_service_id
		{
			get
			{
				return this._care_service_id;
			}
			set
			{
				if ((this._care_service_id != value))
				{
					this.Oncare_service_idChanging(value);
					this.SendPropertyChanging();
					this._care_service_id = value;
					this.SendPropertyChanged("care_service_id");
					this.Oncare_service_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_from", DbType="DateTime NOT NULL")]
		public System.DateTime date_from
		{
			get
			{
				return this._date_from;
			}
			set
			{
				if ((this._date_from != value))
				{
					this.Ondate_fromChanging(value);
					this.SendPropertyChanging();
					this._date_from = value;
					this.SendPropertyChanged("date_from");
					this.Ondate_fromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data_to", DbType="DateTime")]
		public System.Nullable<System.DateTime> data_to
		{
			get
			{
				return this._data_to;
			}
			set
			{
				if ((this._data_to != value))
				{
					this.Ondata_toChanging(value);
					this.SendPropertyChanging();
					this._data_to = value;
					this.SendPropertyChanged("data_to");
					this.Ondata_toChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Care_care_id", DbType="Int NOT NULL")]
		public int Care_care_id
		{
			get
			{
				return this._Care_care_id;
			}
			set
			{
				if ((this._Care_care_id != value))
				{
					if (this._CareSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCare_care_idChanging(value);
					this.SendPropertyChanging();
					this._Care_care_id = value;
					this.SendPropertyChanged("Care_care_id");
					this.OnCare_care_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company_company_id", DbType="Int NOT NULL")]
		public int Company_company_id
		{
			get
			{
				return this._Company_company_id;
			}
			set
			{
				if ((this._Company_company_id != value))
				{
					if (this._CompanySet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompany_company_idChanging(value);
					this.SendPropertyChanging();
					this._Company_company_id = value;
					this.SendPropertyChanged("Company_company_id");
					this.OnCompany_company_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Service_service_id", DbType="Int NOT NULL")]
		public int Service_service_id
		{
			get
			{
				return this._Service_service_id;
			}
			set
			{
				if ((this._Service_service_id != value))
				{
					if (this._ServiceSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnService_service_idChanging(value);
					this.SendPropertyChanging();
					this._Service_service_id = value;
					this.SendPropertyChanged("Service_service_id");
					this.OnService_service_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CareSet_Care_serviceSet", Storage="_CareSet", ThisKey="Care_care_id", OtherKey="care_id", IsForeignKey=true)]
		public CareSet CareSet
		{
			get
			{
				return this._CareSet.Entity;
			}
			set
			{
				CareSet previousValue = this._CareSet.Entity;
				if (((previousValue != value) 
							|| (this._CareSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CareSet.Entity = null;
						previousValue.Care_serviceSets.Remove(this);
					}
					this._CareSet.Entity = value;
					if ((value != null))
					{
						value.Care_serviceSets.Add(this);
						this._Care_care_id = value.care_id;
					}
					else
					{
						this._Care_care_id = default(int);
					}
					this.SendPropertyChanged("CareSet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanySet_Care_serviceSet", Storage="_CompanySet", ThisKey="Company_company_id", OtherKey="company_id", IsForeignKey=true)]
		public CompanySet CompanySet
		{
			get
			{
				return this._CompanySet.Entity;
			}
			set
			{
				CompanySet previousValue = this._CompanySet.Entity;
				if (((previousValue != value) 
							|| (this._CompanySet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanySet.Entity = null;
						previousValue.Care_serviceSets.Remove(this);
					}
					this._CompanySet.Entity = value;
					if ((value != null))
					{
						value.Care_serviceSets.Add(this);
						this._Company_company_id = value.company_id;
					}
					else
					{
						this._Company_company_id = default(int);
					}
					this.SendPropertyChanged("CompanySet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceSet_Care_serviceSet", Storage="_ServiceSet", ThisKey="Service_service_id", OtherKey="service_id", IsForeignKey=true)]
		public ServiceSet ServiceSet
		{
			get
			{
				return this._ServiceSet.Entity;
			}
			set
			{
				ServiceSet previousValue = this._ServiceSet.Entity;
				if (((previousValue != value) 
							|| (this._ServiceSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceSet.Entity = null;
						previousValue.Care_serviceSets.Remove(this);
					}
					this._ServiceSet.Entity = value;
					if ((value != null))
					{
						value.Care_serviceSets.Add(this);
						this._Service_service_id = value.service_id;
					}
					else
					{
						this._Service_service_id = default(int);
					}
					this.SendPropertyChanged("ServiceSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CareSet")]
	public partial class CareSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _care_id;
		
		private System.DateTime _date_from;
		
		private System.Nullable<System.DateTime> _date_to;
		
		private int _Vehicle_vehicle_id;
		
		private int _Keeper_worker_id;
		
		private EntitySet<Care_serviceSet> _Care_serviceSets;
		
		private EntityRef<VehicleSet> _VehicleSet;
		
		private EntityRef<WorkerSet_Keeper> _WorkerSet_Keeper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncare_idChanging(int value);
    partial void Oncare_idChanged();
    partial void Ondate_fromChanging(System.DateTime value);
    partial void Ondate_fromChanged();
    partial void Ondate_toChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_toChanged();
    partial void OnVehicle_vehicle_idChanging(int value);
    partial void OnVehicle_vehicle_idChanged();
    partial void OnKeeper_worker_idChanging(int value);
    partial void OnKeeper_worker_idChanged();
    #endregion
		
		public CareSet()
		{
			this._Care_serviceSets = new EntitySet<Care_serviceSet>(new Action<Care_serviceSet>(this.attach_Care_serviceSets), new Action<Care_serviceSet>(this.detach_Care_serviceSets));
			this._VehicleSet = default(EntityRef<VehicleSet>);
			this._WorkerSet_Keeper = default(EntityRef<WorkerSet_Keeper>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_care_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int care_id
		{
			get
			{
				return this._care_id;
			}
			set
			{
				if ((this._care_id != value))
				{
					this.Oncare_idChanging(value);
					this.SendPropertyChanging();
					this._care_id = value;
					this.SendPropertyChanged("care_id");
					this.Oncare_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_from", DbType="DateTime NOT NULL")]
		public System.DateTime date_from
		{
			get
			{
				return this._date_from;
			}
			set
			{
				if ((this._date_from != value))
				{
					this.Ondate_fromChanging(value);
					this.SendPropertyChanging();
					this._date_from = value;
					this.SendPropertyChanged("date_from");
					this.Ondate_fromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_to", DbType="DateTime")]
		public System.Nullable<System.DateTime> date_to
		{
			get
			{
				return this._date_to;
			}
			set
			{
				if ((this._date_to != value))
				{
					this.Ondate_toChanging(value);
					this.SendPropertyChanging();
					this._date_to = value;
					this.SendPropertyChanged("date_to");
					this.Ondate_toChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vehicle_vehicle_id", DbType="Int NOT NULL")]
		public int Vehicle_vehicle_id
		{
			get
			{
				return this._Vehicle_vehicle_id;
			}
			set
			{
				if ((this._Vehicle_vehicle_id != value))
				{
					if (this._VehicleSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicle_vehicle_idChanging(value);
					this.SendPropertyChanging();
					this._Vehicle_vehicle_id = value;
					this.SendPropertyChanged("Vehicle_vehicle_id");
					this.OnVehicle_vehicle_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keeper_worker_id", DbType="Int NOT NULL")]
		public int Keeper_worker_id
		{
			get
			{
				return this._Keeper_worker_id;
			}
			set
			{
				if ((this._Keeper_worker_id != value))
				{
					if (this._WorkerSet_Keeper.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKeeper_worker_idChanging(value);
					this.SendPropertyChanging();
					this._Keeper_worker_id = value;
					this.SendPropertyChanged("Keeper_worker_id");
					this.OnKeeper_worker_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CareSet_Care_serviceSet", Storage="_Care_serviceSets", ThisKey="care_id", OtherKey="Care_care_id")]
		public EntitySet<Care_serviceSet> Care_serviceSets
		{
			get
			{
				return this._Care_serviceSets;
			}
			set
			{
				this._Care_serviceSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleSet_CareSet", Storage="_VehicleSet", ThisKey="Vehicle_vehicle_id", OtherKey="vehicle_id", IsForeignKey=true)]
		public VehicleSet VehicleSet
		{
			get
			{
				return this._VehicleSet.Entity;
			}
			set
			{
				VehicleSet previousValue = this._VehicleSet.Entity;
				if (((previousValue != value) 
							|| (this._VehicleSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleSet.Entity = null;
						previousValue.CareSets.Remove(this);
					}
					this._VehicleSet.Entity = value;
					if ((value != null))
					{
						value.CareSets.Add(this);
						this._Vehicle_vehicle_id = value.vehicle_id;
					}
					else
					{
						this._Vehicle_vehicle_id = default(int);
					}
					this.SendPropertyChanged("VehicleSet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerSet_Keeper_CareSet", Storage="_WorkerSet_Keeper", ThisKey="Keeper_worker_id", OtherKey="worker_id", IsForeignKey=true)]
		public WorkerSet_Keeper WorkerSet_Keeper
		{
			get
			{
				return this._WorkerSet_Keeper.Entity;
			}
			set
			{
				WorkerSet_Keeper previousValue = this._WorkerSet_Keeper.Entity;
				if (((previousValue != value) 
							|| (this._WorkerSet_Keeper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkerSet_Keeper.Entity = null;
						previousValue.CareSets.Remove(this);
					}
					this._WorkerSet_Keeper.Entity = value;
					if ((value != null))
					{
						value.CareSets.Add(this);
						this._Keeper_worker_id = value.worker_id;
					}
					else
					{
						this._Keeper_worker_id = default(int);
					}
					this.SendPropertyChanged("WorkerSet_Keeper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Care_serviceSets(Care_serviceSet entity)
		{
			this.SendPropertyChanging();
			entity.CareSet = this;
		}
		
		private void detach_Care_serviceSets(Care_serviceSet entity)
		{
			this.SendPropertyChanging();
			entity.CareSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Check_vehicleSet")]
	public partial class Check_vehicleSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _check_id;
		
		private System.DateTime _tech_review;
		
		private System.DateTime _oil_change;
		
		private int _oil_change_mileage;
		
		private System.DateTime _timing_gear;
		
		private int _timing_gear_mileage;
		
		private int _Vehicle_vehicle_id;
		
		private EntityRef<VehicleSet> _VehicleSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncheck_idChanging(int value);
    partial void Oncheck_idChanged();
    partial void Ontech_reviewChanging(System.DateTime value);
    partial void Ontech_reviewChanged();
    partial void Onoil_changeChanging(System.DateTime value);
    partial void Onoil_changeChanged();
    partial void Onoil_change_mileageChanging(int value);
    partial void Onoil_change_mileageChanged();
    partial void Ontiming_gearChanging(System.DateTime value);
    partial void Ontiming_gearChanged();
    partial void Ontiming_gear_mileageChanging(int value);
    partial void Ontiming_gear_mileageChanged();
    partial void OnVehicle_vehicle_idChanging(int value);
    partial void OnVehicle_vehicle_idChanged();
    #endregion
		
		public Check_vehicleSet()
		{
			this._VehicleSet = default(EntityRef<VehicleSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_check_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int check_id
		{
			get
			{
				return this._check_id;
			}
			set
			{
				if ((this._check_id != value))
				{
					this.Oncheck_idChanging(value);
					this.SendPropertyChanging();
					this._check_id = value;
					this.SendPropertyChanged("check_id");
					this.Oncheck_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tech_review", DbType="DateTime NOT NULL")]
		public System.DateTime tech_review
		{
			get
			{
				return this._tech_review;
			}
			set
			{
				if ((this._tech_review != value))
				{
					this.Ontech_reviewChanging(value);
					this.SendPropertyChanging();
					this._tech_review = value;
					this.SendPropertyChanged("tech_review");
					this.Ontech_reviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oil_change", DbType="DateTime NOT NULL")]
		public System.DateTime oil_change
		{
			get
			{
				return this._oil_change;
			}
			set
			{
				if ((this._oil_change != value))
				{
					this.Onoil_changeChanging(value);
					this.SendPropertyChanging();
					this._oil_change = value;
					this.SendPropertyChanged("oil_change");
					this.Onoil_changeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_oil_change_mileage", DbType="Int NOT NULL")]
		public int oil_change_mileage
		{
			get
			{
				return this._oil_change_mileage;
			}
			set
			{
				if ((this._oil_change_mileage != value))
				{
					this.Onoil_change_mileageChanging(value);
					this.SendPropertyChanging();
					this._oil_change_mileage = value;
					this.SendPropertyChanged("oil_change_mileage");
					this.Onoil_change_mileageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timing_gear", DbType="DateTime NOT NULL")]
		public System.DateTime timing_gear
		{
			get
			{
				return this._timing_gear;
			}
			set
			{
				if ((this._timing_gear != value))
				{
					this.Ontiming_gearChanging(value);
					this.SendPropertyChanging();
					this._timing_gear = value;
					this.SendPropertyChanged("timing_gear");
					this.Ontiming_gearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timing_gear_mileage", DbType="Int NOT NULL")]
		public int timing_gear_mileage
		{
			get
			{
				return this._timing_gear_mileage;
			}
			set
			{
				if ((this._timing_gear_mileage != value))
				{
					this.Ontiming_gear_mileageChanging(value);
					this.SendPropertyChanging();
					this._timing_gear_mileage = value;
					this.SendPropertyChanged("timing_gear_mileage");
					this.Ontiming_gear_mileageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vehicle_vehicle_id", DbType="Int NOT NULL")]
		public int Vehicle_vehicle_id
		{
			get
			{
				return this._Vehicle_vehicle_id;
			}
			set
			{
				if ((this._Vehicle_vehicle_id != value))
				{
					if (this._VehicleSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicle_vehicle_idChanging(value);
					this.SendPropertyChanging();
					this._Vehicle_vehicle_id = value;
					this.SendPropertyChanged("Vehicle_vehicle_id");
					this.OnVehicle_vehicle_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleSet_Check_vehicleSet", Storage="_VehicleSet", ThisKey="Vehicle_vehicle_id", OtherKey="vehicle_id", IsForeignKey=true)]
		public VehicleSet VehicleSet
		{
			get
			{
				return this._VehicleSet.Entity;
			}
			set
			{
				VehicleSet previousValue = this._VehicleSet.Entity;
				if (((previousValue != value) 
							|| (this._VehicleSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleSet.Entity = null;
						previousValue.Check_vehicleSets.Remove(this);
					}
					this._VehicleSet.Entity = value;
					if ((value != null))
					{
						value.Check_vehicleSets.Add(this);
						this._Vehicle_vehicle_id = value.vehicle_id;
					}
					else
					{
						this._Vehicle_vehicle_id = default(int);
					}
					this.SendPropertyChanged("VehicleSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanySet")]
	public partial class CompanySet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _company_id;
		
		private string _name;
		
		private string _description;
		
		private string _address;
		
		private string _phone_nr;
		
		private EntitySet<Care_serviceSet> _Care_serviceSets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncompany_idChanging(int value);
    partial void Oncompany_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void Onphone_nrChanging(string value);
    partial void Onphone_nrChanged();
    #endregion
		
		public CompanySet()
		{
			this._Care_serviceSets = new EntitySet<Care_serviceSet>(new Action<Care_serviceSet>(this.attach_Care_serviceSets), new Action<Care_serviceSet>(this.detach_Care_serviceSets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_company_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int company_id
		{
			get
			{
				return this._company_id;
			}
			set
			{
				if ((this._company_id != value))
				{
					this.Oncompany_idChanging(value);
					this.SendPropertyChanging();
					this._company_id = value;
					this.SendPropertyChanged("company_id");
					this.Oncompany_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone_nr", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string phone_nr
		{
			get
			{
				return this._phone_nr;
			}
			set
			{
				if ((this._phone_nr != value))
				{
					this.Onphone_nrChanging(value);
					this.SendPropertyChanging();
					this._phone_nr = value;
					this.SendPropertyChanged("phone_nr");
					this.Onphone_nrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanySet_Care_serviceSet", Storage="_Care_serviceSets", ThisKey="company_id", OtherKey="Company_company_id")]
		public EntitySet<Care_serviceSet> Care_serviceSets
		{
			get
			{
				return this._Care_serviceSets;
			}
			set
			{
				this._Care_serviceSets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Care_serviceSets(Care_serviceSet entity)
		{
			this.SendPropertyChanging();
			entity.CompanySet = this;
		}
		
		private void detach_Care_serviceSets(Care_serviceSet entity)
		{
			this.SendPropertyChanging();
			entity.CompanySet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurchaseSet")]
	public partial class PurchaseSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _purchase_id;
		
		private System.DateTime _purchase_date;
		
		private System.Nullable<int> _mileage;
		
		private System.Nullable<double> _litres;
		
		private string _type;
		
		private double _price;
		
		private int _Rent_rent_id;
		
		private EntityRef<RentSet> _RentSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpurchase_idChanging(int value);
    partial void Onpurchase_idChanged();
    partial void Onpurchase_dateChanging(System.DateTime value);
    partial void Onpurchase_dateChanged();
    partial void OnmileageChanging(System.Nullable<int> value);
    partial void OnmileageChanged();
    partial void OnlitresChanging(System.Nullable<double> value);
    partial void OnlitresChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnRent_rent_idChanging(int value);
    partial void OnRent_rent_idChanged();
    #endregion
		
		public PurchaseSet()
		{
			this._RentSet = default(EntityRef<RentSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_purchase_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int purchase_id
		{
			get
			{
				return this._purchase_id;
			}
			set
			{
				if ((this._purchase_id != value))
				{
					this.Onpurchase_idChanging(value);
					this.SendPropertyChanging();
					this._purchase_id = value;
					this.SendPropertyChanged("purchase_id");
					this.Onpurchase_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_purchase_date", DbType="DateTime NOT NULL")]
		public System.DateTime purchase_date
		{
			get
			{
				return this._purchase_date;
			}
			set
			{
				if ((this._purchase_date != value))
				{
					this.Onpurchase_dateChanging(value);
					this.SendPropertyChanging();
					this._purchase_date = value;
					this.SendPropertyChanged("purchase_date");
					this.Onpurchase_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mileage", DbType="Int")]
		public System.Nullable<int> mileage
		{
			get
			{
				return this._mileage;
			}
			set
			{
				if ((this._mileage != value))
				{
					this.OnmileageChanging(value);
					this.SendPropertyChanging();
					this._mileage = value;
					this.SendPropertyChanged("mileage");
					this.OnmileageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_litres", DbType="Float")]
		public System.Nullable<double> litres
		{
			get
			{
				return this._litres;
			}
			set
			{
				if ((this._litres != value))
				{
					this.OnlitresChanging(value);
					this.SendPropertyChanging();
					this._litres = value;
					this.SendPropertyChanged("litres");
					this.OnlitresChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NVarChar(MAX)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rent_rent_id", DbType="Int NOT NULL")]
		public int Rent_rent_id
		{
			get
			{
				return this._Rent_rent_id;
			}
			set
			{
				if ((this._Rent_rent_id != value))
				{
					if (this._RentSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRent_rent_idChanging(value);
					this.SendPropertyChanging();
					this._Rent_rent_id = value;
					this.SendPropertyChanged("Rent_rent_id");
					this.OnRent_rent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RentSet_PurchaseSet", Storage="_RentSet", ThisKey="Rent_rent_id", OtherKey="rent_id", IsForeignKey=true)]
		public RentSet RentSet
		{
			get
			{
				return this._RentSet.Entity;
			}
			set
			{
				RentSet previousValue = this._RentSet.Entity;
				if (((previousValue != value) 
							|| (this._RentSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RentSet.Entity = null;
						previousValue.PurchaseSets.Remove(this);
					}
					this._RentSet.Entity = value;
					if ((value != null))
					{
						value.PurchaseSets.Add(this);
						this._Rent_rent_id = value.rent_id;
					}
					else
					{
						this._Rent_rent_id = default(int);
					}
					this.SendPropertyChanged("RentSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RentSet")]
	public partial class RentSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rent_id;
		
		private string _purpose;
		
		private System.DateTime _date_from;
		
		private System.DateTime _date_to;
		
		private int _mileage_start;
		
		private int _Worker_worker_id;
		
		private int _Reservation_reservation_id;
		
		private int _Vehicle_vehicle_id;
		
		private EntitySet<PurchaseSet> _PurchaseSets;
		
		private EntityRef<ReservationSet> _ReservationSet;
		
		private EntityRef<VehicleSet> _VehicleSet;
		
		private EntityRef<WorkerSet> _WorkerSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrent_idChanging(int value);
    partial void Onrent_idChanged();
    partial void OnpurposeChanging(string value);
    partial void OnpurposeChanged();
    partial void Ondate_fromChanging(System.DateTime value);
    partial void Ondate_fromChanged();
    partial void Ondate_toChanging(System.DateTime value);
    partial void Ondate_toChanged();
    partial void Onmileage_startChanging(int value);
    partial void Onmileage_startChanged();
    partial void OnWorker_worker_idChanging(int value);
    partial void OnWorker_worker_idChanged();
    partial void OnReservation_reservation_idChanging(int value);
    partial void OnReservation_reservation_idChanged();
    partial void OnVehicle_vehicle_idChanging(int value);
    partial void OnVehicle_vehicle_idChanged();
    #endregion
		
		public RentSet()
		{
			this._PurchaseSets = new EntitySet<PurchaseSet>(new Action<PurchaseSet>(this.attach_PurchaseSets), new Action<PurchaseSet>(this.detach_PurchaseSets));
			this._ReservationSet = default(EntityRef<ReservationSet>);
			this._VehicleSet = default(EntityRef<VehicleSet>);
			this._WorkerSet = default(EntityRef<WorkerSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rent_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rent_id
		{
			get
			{
				return this._rent_id;
			}
			set
			{
				if ((this._rent_id != value))
				{
					this.Onrent_idChanging(value);
					this.SendPropertyChanging();
					this._rent_id = value;
					this.SendPropertyChanged("rent_id");
					this.Onrent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_purpose", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string purpose
		{
			get
			{
				return this._purpose;
			}
			set
			{
				if ((this._purpose != value))
				{
					this.OnpurposeChanging(value);
					this.SendPropertyChanging();
					this._purpose = value;
					this.SendPropertyChanged("purpose");
					this.OnpurposeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_from", DbType="DateTime NOT NULL")]
		public System.DateTime date_from
		{
			get
			{
				return this._date_from;
			}
			set
			{
				if ((this._date_from != value))
				{
					this.Ondate_fromChanging(value);
					this.SendPropertyChanging();
					this._date_from = value;
					this.SendPropertyChanged("date_from");
					this.Ondate_fromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_to", DbType="DateTime NOT NULL")]
		public System.DateTime date_to
		{
			get
			{
				return this._date_to;
			}
			set
			{
				if ((this._date_to != value))
				{
					this.Ondate_toChanging(value);
					this.SendPropertyChanging();
					this._date_to = value;
					this.SendPropertyChanged("date_to");
					this.Ondate_toChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mileage_start", DbType="Int NOT NULL")]
		public int mileage_start
		{
			get
			{
				return this._mileage_start;
			}
			set
			{
				if ((this._mileage_start != value))
				{
					this.Onmileage_startChanging(value);
					this.SendPropertyChanging();
					this._mileage_start = value;
					this.SendPropertyChanged("mileage_start");
					this.Onmileage_startChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Worker_worker_id", DbType="Int NOT NULL")]
		public int Worker_worker_id
		{
			get
			{
				return this._Worker_worker_id;
			}
			set
			{
				if ((this._Worker_worker_id != value))
				{
					if (this._WorkerSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorker_worker_idChanging(value);
					this.SendPropertyChanging();
					this._Worker_worker_id = value;
					this.SendPropertyChanged("Worker_worker_id");
					this.OnWorker_worker_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reservation_reservation_id", DbType="Int ALLOW NULL")]
		public int Reservation_reservation_id
		{
			get
			{
				return this._Reservation_reservation_id;
			}
			set
			{
				if ((this._Reservation_reservation_id != value))
				{
					if (this._ReservationSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservation_reservation_idChanging(value);
					this.SendPropertyChanging();
					this._Reservation_reservation_id = value;
					this.SendPropertyChanged("Reservation_reservation_id");
					this.OnReservation_reservation_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vehicle_vehicle_id", DbType="Int NOT NULL")]
		public int Vehicle_vehicle_id
		{
			get
			{
				return this._Vehicle_vehicle_id;
			}
			set
			{
				if ((this._Vehicle_vehicle_id != value))
				{
					if (this._VehicleSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicle_vehicle_idChanging(value);
					this.SendPropertyChanging();
					this._Vehicle_vehicle_id = value;
					this.SendPropertyChanged("Vehicle_vehicle_id");
					this.OnVehicle_vehicle_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RentSet_PurchaseSet", Storage="_PurchaseSets", ThisKey="rent_id", OtherKey="Rent_rent_id")]
		public EntitySet<PurchaseSet> PurchaseSets
		{
			get
			{
				return this._PurchaseSets;
			}
			set
			{
				this._PurchaseSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationSet_RentSet", Storage="_ReservationSet", ThisKey="Reservation_reservation_id", OtherKey="reservation_id", IsForeignKey=true)]
		public ReservationSet ReservationSet
		{
			get
			{
				return this._ReservationSet.Entity;
			}
			set
			{
				ReservationSet previousValue = this._ReservationSet.Entity;
				if (((previousValue != value) 
							|| (this._ReservationSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReservationSet.Entity = null;
						previousValue.RentSets.Remove(this);
					}
					this._ReservationSet.Entity = value;
					if ((value != null))
					{
						value.RentSets.Add(this);
						this._Reservation_reservation_id = value.reservation_id;
					}
					else
					{
						this._Reservation_reservation_id = default(int);
					}
					this.SendPropertyChanged("ReservationSet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleSet_RentSet", Storage="_VehicleSet", ThisKey="Vehicle_vehicle_id", OtherKey="vehicle_id", IsForeignKey=true)]
		public VehicleSet VehicleSet
		{
			get
			{
				return this._VehicleSet.Entity;
			}
			set
			{
				VehicleSet previousValue = this._VehicleSet.Entity;
				if (((previousValue != value) 
							|| (this._VehicleSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleSet.Entity = null;
						previousValue.RentSets.Remove(this);
					}
					this._VehicleSet.Entity = value;
					if ((value != null))
					{
						value.RentSets.Add(this);
						this._Vehicle_vehicle_id = value.vehicle_id;
					}
					else
					{
						this._Vehicle_vehicle_id = default(int);
					}
					this.SendPropertyChanged("VehicleSet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerSet_RentSet", Storage="_WorkerSet", ThisKey="Worker_worker_id", OtherKey="worker_id", IsForeignKey=true)]
		public WorkerSet WorkerSet
		{
			get
			{
				return this._WorkerSet.Entity;
			}
			set
			{
				WorkerSet previousValue = this._WorkerSet.Entity;
				if (((previousValue != value) 
							|| (this._WorkerSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkerSet.Entity = null;
						previousValue.RentSets.Remove(this);
					}
					this._WorkerSet.Entity = value;
					if ((value != null))
					{
						value.RentSets.Add(this);
						this._Worker_worker_id = value.worker_id;
					}
					else
					{
						this._Worker_worker_id = default(int);
					}
					this.SendPropertyChanged("WorkerSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PurchaseSets(PurchaseSet entity)
		{
			this.SendPropertyChanging();
			entity.RentSet = this;
		}
		
		private void detach_PurchaseSets(PurchaseSet entity)
		{
			this.SendPropertyChanging();
			entity.RentSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservationSet")]
	public partial class ReservationSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _reservation_id;
		
		private string _purpose;
		
		private System.DateTime _date_from;
		
		private System.DateTime _date_to;
		
		private int _Worker_worker_id;
		
		private int _Vehicle_vehicle_id;
		
		private EntitySet<RentSet> _RentSets;
		
		private EntityRef<VehicleSet> _VehicleSet;
		
		private EntityRef<WorkerSet> _WorkerSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onreservation_idChanging(int value);
    partial void Onreservation_idChanged();
    partial void OnpurposeChanging(string value);
    partial void OnpurposeChanged();
    partial void Ondate_fromChanging(System.DateTime value);
    partial void Ondate_fromChanged();
    partial void Ondate_toChanging(System.DateTime value);
    partial void Ondate_toChanged();
    partial void OnWorker_worker_idChanging(int value);
    partial void OnWorker_worker_idChanged();
    partial void OnVehicle_vehicle_idChanging(int value);
    partial void OnVehicle_vehicle_idChanged();
    #endregion
		
		public ReservationSet()
		{
			this._RentSets = new EntitySet<RentSet>(new Action<RentSet>(this.attach_RentSets), new Action<RentSet>(this.detach_RentSets));
			this._VehicleSet = default(EntityRef<VehicleSet>);
			this._WorkerSet = default(EntityRef<WorkerSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reservation_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int reservation_id
		{
			get
			{
				return this._reservation_id;
			}
			set
			{
				if ((this._reservation_id != value))
				{
					this.Onreservation_idChanging(value);
					this.SendPropertyChanging();
					this._reservation_id = value;
					this.SendPropertyChanged("reservation_id");
					this.Onreservation_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_purpose", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string purpose
		{
			get
			{
				return this._purpose;
			}
			set
			{
				if ((this._purpose != value))
				{
					this.OnpurposeChanging(value);
					this.SendPropertyChanging();
					this._purpose = value;
					this.SendPropertyChanged("purpose");
					this.OnpurposeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_from", DbType="DateTime NOT NULL")]
		public System.DateTime date_from
		{
			get
			{
				return this._date_from;
			}
			set
			{
				if ((this._date_from != value))
				{
					this.Ondate_fromChanging(value);
					this.SendPropertyChanging();
					this._date_from = value;
					this.SendPropertyChanged("date_from");
					this.Ondate_fromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_to", DbType="DateTime NOT NULL")]
		public System.DateTime date_to
		{
			get
			{
				return this._date_to;
			}
			set
			{
				if ((this._date_to != value))
				{
					this.Ondate_toChanging(value);
					this.SendPropertyChanging();
					this._date_to = value;
					this.SendPropertyChanged("date_to");
					this.Ondate_toChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Worker_worker_id", DbType="Int NOT NULL")]
		public int Worker_worker_id
		{
			get
			{
				return this._Worker_worker_id;
			}
			set
			{
				if ((this._Worker_worker_id != value))
				{
					if (this._WorkerSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorker_worker_idChanging(value);
					this.SendPropertyChanging();
					this._Worker_worker_id = value;
					this.SendPropertyChanged("Worker_worker_id");
					this.OnWorker_worker_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vehicle_vehicle_id", DbType="Int NOT NULL")]
		public int Vehicle_vehicle_id
		{
			get
			{
				return this._Vehicle_vehicle_id;
			}
			set
			{
				if ((this._Vehicle_vehicle_id != value))
				{
					if (this._VehicleSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicle_vehicle_idChanging(value);
					this.SendPropertyChanging();
					this._Vehicle_vehicle_id = value;
					this.SendPropertyChanged("Vehicle_vehicle_id");
					this.OnVehicle_vehicle_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReservationSet_RentSet", Storage="_RentSets", ThisKey="reservation_id", OtherKey="Reservation_reservation_id")]
		public EntitySet<RentSet> RentSets
		{
			get
			{
				return this._RentSets;
			}
			set
			{
				this._RentSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleSet_ReservationSet", Storage="_VehicleSet", ThisKey="Vehicle_vehicle_id", OtherKey="vehicle_id", IsForeignKey=true)]
		public VehicleSet VehicleSet
		{
			get
			{
				return this._VehicleSet.Entity;
			}
			set
			{
				VehicleSet previousValue = this._VehicleSet.Entity;
				if (((previousValue != value) 
							|| (this._VehicleSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleSet.Entity = null;
						previousValue.ReservationSets.Remove(this);
					}
					this._VehicleSet.Entity = value;
					if ((value != null))
					{
						value.ReservationSets.Add(this);
						this._Vehicle_vehicle_id = value.vehicle_id;
					}
					else
					{
						this._Vehicle_vehicle_id = default(int);
					}
					this.SendPropertyChanged("VehicleSet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerSet_ReservationSet", Storage="_WorkerSet", ThisKey="Worker_worker_id", OtherKey="worker_id", IsForeignKey=true)]
		public WorkerSet WorkerSet
		{
			get
			{
				return this._WorkerSet.Entity;
			}
			set
			{
				WorkerSet previousValue = this._WorkerSet.Entity;
				if (((previousValue != value) 
							|| (this._WorkerSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkerSet.Entity = null;
						previousValue.ReservationSets.Remove(this);
					}
					this._WorkerSet.Entity = value;
					if ((value != null))
					{
						value.ReservationSets.Add(this);
						this._Worker_worker_id = value.worker_id;
					}
					else
					{
						this._Worker_worker_id = default(int);
					}
					this.SendPropertyChanged("WorkerSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RentSets(RentSet entity)
		{
			this.SendPropertyChanging();
			entity.ReservationSet = this;
		}
		
		private void detach_RentSets(RentSet entity)
		{
			this.SendPropertyChanging();
			entity.ReservationSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceSet")]
	public partial class ServiceSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _service_id;
		
		private bool _is_repair;
		
		private string _name;
		
		private string _description;
		
		private EntitySet<Care_serviceSet> _Care_serviceSets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onservice_idChanging(int value);
    partial void Onservice_idChanged();
    partial void Onis_repairChanging(bool value);
    partial void Onis_repairChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public ServiceSet()
		{
			this._Care_serviceSets = new EntitySet<Care_serviceSet>(new Action<Care_serviceSet>(this.attach_Care_serviceSets), new Action<Care_serviceSet>(this.detach_Care_serviceSets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_service_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int service_id
		{
			get
			{
				return this._service_id;
			}
			set
			{
				if ((this._service_id != value))
				{
					this.Onservice_idChanging(value);
					this.SendPropertyChanging();
					this._service_id = value;
					this.SendPropertyChanged("service_id");
					this.Onservice_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_repair", DbType="Bit NOT NULL")]
		public bool is_repair
		{
			get
			{
				return this._is_repair;
			}
			set
			{
				if ((this._is_repair != value))
				{
					this.Onis_repairChanging(value);
					this.SendPropertyChanging();
					this._is_repair = value;
					this.SendPropertyChanged("is_repair");
					this.Onis_repairChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceSet_Care_serviceSet", Storage="_Care_serviceSets", ThisKey="service_id", OtherKey="Service_service_id")]
		public EntitySet<Care_serviceSet> Care_serviceSets
		{
			get
			{
				return this._Care_serviceSets;
			}
			set
			{
				this._Care_serviceSets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Care_serviceSets(Care_serviceSet entity)
		{
			this.SendPropertyChanging();
			entity.ServiceSet = this;
		}
		
		private void detach_Care_serviceSets(Care_serviceSet entity)
		{
			this.SendPropertyChanging();
			entity.ServiceSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleSet")]
	public partial class VehicleSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _vehicle_id;
		
		private string _brand;
		
		private string _model;
		
		private string _version;
		
		private string _equipment;
		
		private string _licence_plate;
		
		private double _avg_consumption;
		
		private string _fuel_type;
		
		private string _available;
		
		private EntitySet<CareSet> _CareSets;
		
		private EntitySet<Check_vehicleSet> _Check_vehicleSets;
		
		private EntitySet<RentSet> _RentSets;
		
		private EntitySet<ReservationSet> _ReservationSets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onvehicle_idChanging(int value);
    partial void Onvehicle_idChanged();
    partial void OnbrandChanging(string value);
    partial void OnbrandChanged();
    partial void OnmodelChanging(string value);
    partial void OnmodelChanged();
    partial void OnversionChanging(string value);
    partial void OnversionChanged();
    partial void OnequipmentChanging(string value);
    partial void OnequipmentChanged();
    partial void Onlicence_plateChanging(string value);
    partial void Onlicence_plateChanged();
    partial void Onavg_consumptionChanging(double value);
    partial void Onavg_consumptionChanged();
    partial void Onfuel_typeChanging(string value);
    partial void Onfuel_typeChanged();
    partial void OnavailableChanging(string value);
    partial void OnavailableChanged();
    #endregion
		
		public VehicleSet()
		{
			this._CareSets = new EntitySet<CareSet>(new Action<CareSet>(this.attach_CareSets), new Action<CareSet>(this.detach_CareSets));
			this._Check_vehicleSets = new EntitySet<Check_vehicleSet>(new Action<Check_vehicleSet>(this.attach_Check_vehicleSets), new Action<Check_vehicleSet>(this.detach_Check_vehicleSets));
			this._RentSets = new EntitySet<RentSet>(new Action<RentSet>(this.attach_RentSets), new Action<RentSet>(this.detach_RentSets));
			this._ReservationSets = new EntitySet<ReservationSet>(new Action<ReservationSet>(this.attach_ReservationSets), new Action<ReservationSet>(this.detach_ReservationSets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vehicle_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int vehicle_id
		{
			get
			{
				return this._vehicle_id;
			}
			set
			{
				if ((this._vehicle_id != value))
				{
					this.Onvehicle_idChanging(value);
					this.SendPropertyChanging();
					this._vehicle_id = value;
					this.SendPropertyChanged("vehicle_id");
					this.Onvehicle_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_brand", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string brand
		{
			get
			{
				return this._brand;
			}
			set
			{
				if ((this._brand != value))
				{
					this.OnbrandChanging(value);
					this.SendPropertyChanging();
					this._brand = value;
					this.SendPropertyChanged("brand");
					this.OnbrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_model", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string model
		{
			get
			{
				return this._model;
			}
			set
			{
				if ((this._model != value))
				{
					this.OnmodelChanging(value);
					this.SendPropertyChanging();
					this._model = value;
					this.SendPropertyChanged("model");
					this.OnmodelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_equipment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string equipment
		{
			get
			{
				return this._equipment;
			}
			set
			{
				if ((this._equipment != value))
				{
					this.OnequipmentChanging(value);
					this.SendPropertyChanging();
					this._equipment = value;
					this.SendPropertyChanged("equipment");
					this.OnequipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_licence_plate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string licence_plate
		{
			get
			{
				return this._licence_plate;
			}
			set
			{
				if ((this._licence_plate != value))
				{
					this.Onlicence_plateChanging(value);
					this.SendPropertyChanging();
					this._licence_plate = value;
					this.SendPropertyChanged("licence_plate");
					this.Onlicence_plateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avg_consumption", DbType="Float NOT NULL")]
		public double avg_consumption
		{
			get
			{
				return this._avg_consumption;
			}
			set
			{
				if ((this._avg_consumption != value))
				{
					this.Onavg_consumptionChanging(value);
					this.SendPropertyChanging();
					this._avg_consumption = value;
					this.SendPropertyChanged("avg_consumption");
					this.Onavg_consumptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fuel_type", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string fuel_type
		{
			get
			{
				return this._fuel_type;
			}
			set
			{
				if ((this._fuel_type != value))
				{
					this.Onfuel_typeChanging(value);
					this.SendPropertyChanging();
					this._fuel_type = value;
					this.SendPropertyChanged("fuel_type");
					this.Onfuel_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_available", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string available
		{
			get
			{
				return this._available;
			}
			set
			{
				if ((this._available != value))
				{
					this.OnavailableChanging(value);
					this.SendPropertyChanging();
					this._available = value;
					this.SendPropertyChanged("available");
					this.OnavailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleSet_CareSet", Storage="_CareSets", ThisKey="vehicle_id", OtherKey="Vehicle_vehicle_id")]
		public EntitySet<CareSet> CareSets
		{
			get
			{
				return this._CareSets;
			}
			set
			{
				this._CareSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleSet_Check_vehicleSet", Storage="_Check_vehicleSets", ThisKey="vehicle_id", OtherKey="Vehicle_vehicle_id")]
		public EntitySet<Check_vehicleSet> Check_vehicleSets
		{
			get
			{
				return this._Check_vehicleSets;
			}
			set
			{
				this._Check_vehicleSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleSet_RentSet", Storage="_RentSets", ThisKey="vehicle_id", OtherKey="Vehicle_vehicle_id")]
		public EntitySet<RentSet> RentSets
		{
			get
			{
				return this._RentSets;
			}
			set
			{
				this._RentSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleSet_ReservationSet", Storage="_ReservationSets", ThisKey="vehicle_id", OtherKey="Vehicle_vehicle_id")]
		public EntitySet<ReservationSet> ReservationSets
		{
			get
			{
				return this._ReservationSets;
			}
			set
			{
				this._ReservationSets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CareSets(CareSet entity)
		{
			this.SendPropertyChanging();
			entity.VehicleSet = this;
		}
		
		private void detach_CareSets(CareSet entity)
		{
			this.SendPropertyChanging();
			entity.VehicleSet = null;
		}
		
		private void attach_Check_vehicleSets(Check_vehicleSet entity)
		{
			this.SendPropertyChanging();
			entity.VehicleSet = this;
		}
		
		private void detach_Check_vehicleSets(Check_vehicleSet entity)
		{
			this.SendPropertyChanging();
			entity.VehicleSet = null;
		}
		
		private void attach_RentSets(RentSet entity)
		{
			this.SendPropertyChanging();
			entity.VehicleSet = this;
		}
		
		private void detach_RentSets(RentSet entity)
		{
			this.SendPropertyChanging();
			entity.VehicleSet = null;
		}
		
		private void attach_ReservationSets(ReservationSet entity)
		{
			this.SendPropertyChanging();
			entity.VehicleSet = this;
		}
		
		private void detach_ReservationSets(ReservationSet entity)
		{
			this.SendPropertyChanging();
			entity.VehicleSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkerSet")]
	public partial class WorkerSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _worker_id;
		
		private string _name;
		
		private string _surname;
		
		private string _position;
		
		private string _PESEL;
		
		private System.DateTime _date_of_birth;
		
		private string _password;
		
		private string _phone_nr;
		
		private string _city;
		
		private string _city_code;
		
		private string _street;
		
		private string _house;
		
		private EntitySet<RentSet> _RentSets;
		
		private EntitySet<ReservationSet> _ReservationSets;
		
		private EntityRef<WorkerSet_Keeper> _WorkerSet_Keeper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onworker_idChanging(int value);
    partial void Onworker_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OnPESELChanging(string value);
    partial void OnPESELChanged();
    partial void Ondate_of_birthChanging(System.DateTime value);
    partial void Ondate_of_birthChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onphone_nrChanging(string value);
    partial void Onphone_nrChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void Oncity_codeChanging(string value);
    partial void Oncity_codeChanged();
    partial void OnstreetChanging(string value);
    partial void OnstreetChanged();
    partial void OnhouseChanging(string value);
    partial void OnhouseChanged();
    #endregion
		
		public WorkerSet()
		{
			this._RentSets = new EntitySet<RentSet>(new Action<RentSet>(this.attach_RentSets), new Action<RentSet>(this.detach_RentSets));
			this._ReservationSets = new EntitySet<ReservationSet>(new Action<ReservationSet>(this.attach_ReservationSets), new Action<ReservationSet>(this.detach_ReservationSets));
			this._WorkerSet_Keeper = default(EntityRef<WorkerSet_Keeper>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_worker_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int worker_id
		{
			get
			{
				return this._worker_id;
			}
			set
			{
				if ((this._worker_id != value))
				{
					this.Onworker_idChanging(value);
					this.SendPropertyChanging();
					this._worker_id = value;
					this.SendPropertyChanged("worker_id");
					this.Onworker_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PESEL", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PESEL
		{
			get
			{
				return this._PESEL;
			}
			set
			{
				if ((this._PESEL != value))
				{
					this.OnPESELChanging(value);
					this.SendPropertyChanging();
					this._PESEL = value;
					this.SendPropertyChanged("PESEL");
					this.OnPESELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_of_birth", DbType="DateTime NOT NULL")]
		public System.DateTime date_of_birth
		{
			get
			{
				return this._date_of_birth;
			}
			set
			{
				if ((this._date_of_birth != value))
				{
					this.Ondate_of_birthChanging(value);
					this.SendPropertyChanging();
					this._date_of_birth = value;
					this.SendPropertyChanged("date_of_birth");
					this.Ondate_of_birthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone_nr", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string phone_nr
		{
			get
			{
				return this._phone_nr;
			}
			set
			{
				if ((this._phone_nr != value))
				{
					this.Onphone_nrChanging(value);
					this.SendPropertyChanging();
					this._phone_nr = value;
					this.SendPropertyChanged("phone_nr");
					this.Onphone_nrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="NVarChar(MAX)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city_code", DbType="NVarChar(MAX)")]
		public string city_code
		{
			get
			{
				return this._city_code;
			}
			set
			{
				if ((this._city_code != value))
				{
					this.Oncity_codeChanging(value);
					this.SendPropertyChanging();
					this._city_code = value;
					this.SendPropertyChanged("city_code");
					this.Oncity_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_street", DbType="NVarChar(MAX)")]
		public string street
		{
			get
			{
				return this._street;
			}
			set
			{
				if ((this._street != value))
				{
					this.OnstreetChanging(value);
					this.SendPropertyChanging();
					this._street = value;
					this.SendPropertyChanged("street");
					this.OnstreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_house", DbType="NVarChar(MAX)")]
		public string house
		{
			get
			{
				return this._house;
			}
			set
			{
				if ((this._house != value))
				{
					this.OnhouseChanging(value);
					this.SendPropertyChanging();
					this._house = value;
					this.SendPropertyChanged("house");
					this.OnhouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerSet_RentSet", Storage="_RentSets", ThisKey="worker_id", OtherKey="Worker_worker_id")]
		public EntitySet<RentSet> RentSets
		{
			get
			{
				return this._RentSets;
			}
			set
			{
				this._RentSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerSet_ReservationSet", Storage="_ReservationSets", ThisKey="worker_id", OtherKey="Worker_worker_id")]
		public EntitySet<ReservationSet> ReservationSets
		{
			get
			{
				return this._ReservationSets;
			}
			set
			{
				this._ReservationSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerSet_WorkerSet_Keeper", Storage="_WorkerSet_Keeper", ThisKey="worker_id", OtherKey="worker_id", IsUnique=true, IsForeignKey=false)]
		public WorkerSet_Keeper WorkerSet_Keeper
		{
			get
			{
				return this._WorkerSet_Keeper.Entity;
			}
			set
			{
				WorkerSet_Keeper previousValue = this._WorkerSet_Keeper.Entity;
				if (((previousValue != value) 
							|| (this._WorkerSet_Keeper.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkerSet_Keeper.Entity = null;
						previousValue.WorkerSet = null;
					}
					this._WorkerSet_Keeper.Entity = value;
					if ((value != null))
					{
						value.WorkerSet = this;
					}
					this.SendPropertyChanged("WorkerSet_Keeper");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RentSets(RentSet entity)
		{
			this.SendPropertyChanging();
			entity.WorkerSet = this;
		}
		
		private void detach_RentSets(RentSet entity)
		{
			this.SendPropertyChanging();
			entity.WorkerSet = null;
		}
		
		private void attach_ReservationSets(ReservationSet entity)
		{
			this.SendPropertyChanging();
			entity.WorkerSet = this;
		}
		
		private void detach_ReservationSets(ReservationSet entity)
		{
			this.SendPropertyChanging();
			entity.WorkerSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkerSet_Keeper")]
	public partial class WorkerSet_Keeper : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _keeper_id;
		
		private int _worker_id;
		
		private EntitySet<CareSet> _CareSets;
		
		private EntityRef<WorkerSet> _WorkerSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onkeeper_idChanging(int value);
    partial void Onkeeper_idChanged();
    partial void Onworker_idChanging(int value);
    partial void Onworker_idChanged();
    #endregion
		
		public WorkerSet_Keeper()
		{
			this._CareSets = new EntitySet<CareSet>(new Action<CareSet>(this.attach_CareSets), new Action<CareSet>(this.detach_CareSets));
			this._WorkerSet = default(EntityRef<WorkerSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_keeper_id", DbType="Int NOT NULL")]
		public int keeper_id
		{
			get
			{
				return this._keeper_id;
			}
			set
			{
				if ((this._keeper_id != value))
				{
					this.Onkeeper_idChanging(value);
					this.SendPropertyChanging();
					this._keeper_id = value;
					this.SendPropertyChanged("keeper_id");
					this.Onkeeper_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_worker_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int worker_id
		{
			get
			{
				return this._worker_id;
			}
			set
			{
				if ((this._worker_id != value))
				{
					if (this._WorkerSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onworker_idChanging(value);
					this.SendPropertyChanging();
					this._worker_id = value;
					this.SendPropertyChanged("worker_id");
					this.Onworker_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerSet_Keeper_CareSet", Storage="_CareSets", ThisKey="worker_id", OtherKey="Keeper_worker_id")]
		public EntitySet<CareSet> CareSets
		{
			get
			{
				return this._CareSets;
			}
			set
			{
				this._CareSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkerSet_WorkerSet_Keeper", Storage="_WorkerSet", ThisKey="worker_id", OtherKey="worker_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WorkerSet WorkerSet
		{
			get
			{
				return this._WorkerSet.Entity;
			}
			set
			{
				WorkerSet previousValue = this._WorkerSet.Entity;
				if (((previousValue != value) 
							|| (this._WorkerSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkerSet.Entity = null;
						previousValue.WorkerSet_Keeper = null;
					}
					this._WorkerSet.Entity = value;
					if ((value != null))
					{
						value.WorkerSet_Keeper = this;
						this._worker_id = value.worker_id;
					}
					else
					{
						this._worker_id = default(int);
					}
					this.SendPropertyChanged("WorkerSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CareSets(CareSet entity)
		{
			this.SendPropertyChanging();
			entity.WorkerSet_Keeper = this;
		}
		
		private void detach_CareSets(CareSet entity)
		{
			this.SendPropertyChanging();
			entity.WorkerSet_Keeper = null;
		}
	}
}
#pragma warning restore 1591
